{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AzDF20"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"LS_AzureDataLakeG2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_AzureDataLakeG2'"
		},
		"LS_OnPremSQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_OnPremSQLServer'"
		},
		"LS_OracleDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_OracleDB'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azdlstr.dfs.core.windows.net"
		},
		"HTTP_SOF_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.2/posts?order=desc&sort=activity&site=stackoverflow"
		},
		"LS_AzureDataLakeG2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azdlstr.dfs.core.windows.net"
		},
		"LS_HttpServer_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.2/posts?order=desc&sort=activity&site=stackoverflow"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.2/posts?order=desc&sort=activity&site=stackoverflow"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HTTP_SOF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HTTP_SOF_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDataLakeG2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDataLakeG2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_AzureDataLakeG2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_HttpServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HttpServer_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AzureDataLakeG2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDataLakeG2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLakeG2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Dataflow_DL_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDataLakeG2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sink",
						"fileSystem": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLakeG2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HttpServer_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_HttpServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_HttpServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"test": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OnPremSQLServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Database": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_OnPremSQLServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OracleDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('LS_OracleDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_SQLserver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPremSQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"Database": {
							"value": "@dataset().Database",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Database": {
						"type": "String"
					},
					"Schema": {
						"type": "String"
					},
					"Table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPremSQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OracleTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OracleDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "ORAUSER",
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OracleDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataCleansing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureDataLakeG2",
								"type": "DatasetReference"
							},
							"name": "DataLakeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Dataflow_DL_Sink",
								"type": "DatasetReference"
							},
							"name": "DataLakeSink"
						}
					],
					"transformations": [
						{
							"name": "RenameColumns"
						},
						{
							"name": "FilterDate"
						},
						{
							"name": "AddNewColumn"
						},
						{
							"name": "RearrangeColumns"
						},
						{
							"name": "RankMoviesByRatings"
						},
						{
							"name": "RearrangeColumnsAgain"
						},
						{
							"name": "Aggregate"
						},
						{
							"name": "ModifyColumnsDataTypes",
							"description": "Autogenerated by data preview actions"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100000) ~> DataLakeSource\nDataLakeSource select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\t{Rotten Tomato} = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RenameColumns\nRenameColumns filter(toInteger(year)>1950) ~> FilterDate\nFilterDate derive(PrimaryGenre = iif(locate('|', genres)>1,left(genres, locate('|',genres)-1) , genres),\n\t\tLoadDate = currentDate()) ~> AddNewColumn\nAddNewColumn select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tPrimaryGenre,\n\t\tyear,\n\t\t{Rotten Tomato},\n\t\tDataLoadDate = LoadDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RearrangeColumns\nRearrangeColumns window(over(PrimaryGenre,\n\t\tyear),\n\tdesc({Rotten Tomato}, true),\n\tRatingsRank = rank()) ~> RankMoviesByRatings\nRankMoviesByRatings select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tPrimaryGenre,\n\t\tyear,\n\t\t{Rotten Tomato},\n\t\tRatingsRank,\n\t\tDataLoadDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RearrangeColumnsAgain\nModifyColumnsDataTypes aggregate(groupBy(PrimaryGenre,\n\t\tyear),\n\tAverageRating = round(avg({Rotten Tomato}), 2),\n\t\tHighestRated = first(title),\n\t\tLowestRated = last(title),\n\t\tNumberOfMovies = count()) ~> Aggregate\nRearrangeColumnsAgain derive(movie = toInteger(movie),\n\t\t{Rotten Tomato} = toInteger({Rotten Tomato}),\n\t\tRatingsRank = toInteger({RatingsRank})) ~> ModifyColumnsDataTypes\nAggregate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:'output.txt',\n\tmapColumn(\n\t\tPrimaryGenre,\n\t\tyear,\n\t\tAverageRating,\n\t\tHighestRated,\n\t\tLowestRated,\n\t\tNumberOfMovies\n\t),\n\tdateFormat:'yyyy-MM-dd',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataLakeSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_AzureDataLakeG2')]",
				"[concat(variables('factoryId'), '/datasets/DS_Dataflow_DL_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File Data From Http Server",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "movie",
											"type": "String"
										},
										"sink": {
											"name": "movie",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String"
										},
										"sink": {
											"name": "title",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "year",
											"type": "String"
										},
										"sink": {
											"name": "year",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Rating",
											"type": "String"
										},
										"sink": {
											"name": "Rating",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Rotton Tomato",
											"type": "String"
										},
										"sink": {
											"name": "Rotton Tomato",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_HttpServer_File",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AzureDataLakeG2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DataCleansing",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get File Data From Http Server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataCleansing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataLakeSource": {},
									"DataLakeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HttpServer_File')]",
				"[concat(variables('factoryId'), '/datasets/DS_AzureDataLakeG2')]",
				"[concat(variables('factoryId'), '/dataflows/DataCleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowPipeline_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataCleansing",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataCleansing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DataLakeSource": {},
									"DataLakeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataCleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup on Employee Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "DS_OnPrem_SQLserver",
								"type": "DatasetReference",
								"parameters": {
									"Database": "TestDB",
									"Schema": "dbo",
									"Table": "employee"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Male Gender Records",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup on Employee Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup on Employee Table').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Gender,'M')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Table Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_OnPrem_SQLserver",
								"type": "DatasetReference",
								"parameters": {
									"Database": "TestDB",
									"Schema": "dbo",
									"Table": "employee"
								}
							},
							"fieldList": [
								"structure",
								"columnCount"
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_SQLserver')]"
			]
		}
	]
}