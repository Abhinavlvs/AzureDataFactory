{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AzDF2020"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/test_pl_a')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test_df_a",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "test_df_a",
								"type": "DataFlowReference",
								"parameters": {
									"Path": {
										"value": "'@{'fortune100_m.csv'}'",
										"type": "Expression"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/test_df_a')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLSG2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "https://azdlg2strg.dfs.core.windows.net",
					"tenant": "b5ba466b-a54c-4eeb-b78f-1fe5525f48d5",
					"servicePrincipalId": "16ebd4f4-75f5-41fe-a3b2-5f6cc4b6ea63",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AzureKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "Az-SP-App-Password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-826475622007401.1.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AzureKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "AzDB-AccessToken"
					},
					"existingClusterId": "0711-090417-pate635"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "https://az-kv-eastus2.vault.azure.net/"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_df_a')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLSG2",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLSG2",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "SortE"
						},
						{
							"name": "AlterRowE"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "DerivedColumn"
						}
					],
					"script": "parameters{\n\tPath as string ('fortune100_m.csv')\n}\nsource(output(\n\t\tId as short,\n\t\trank as short,\n\t\ttitle as string,\n\t\tPrevious_Rank as string,\n\t\tRevenues as double,\n\t\tProfits as double,\n\t\tEmployees as integer,\n\t\tCEO as string,\n\t\tCEO_Title as string,\n\t\tSector as string,\n\t\tIndustry as string,\n\t\tYears_on_Fortune_500_List as string,\n\t\tCity as string,\n\t\tState as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:[($Path)]) ~> source\nsource sort(asc(Revenues, true)) ~> SortE\nSortE alterRow(deleteIf(trim(Previous_Rank)=='NA')) ~> AlterRowE\nDerivedColumn split(Fortune500,\n\tdisjoint: false) ~> ConditionalSplit1@(main, other)\nAlterRowE derive(Fortune500 = Revenues > 4000) ~> DerivedColumn\nConditionalSplit1@main sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLSG2')]"
			]
		}
	]
}